name: Test and Release Go CLI

on:
  workflow_run:
    branches: [master]
    workflows: [tests]

permissions:
  contents: read
  # allow read access to pull request. Use with `only-new-issues` option.
  pull-requests: read

jobs:
  logs:
    name: print some variables to debug publish.yml
    runs-on: ubuntu-22.04
    steps:
      - name: Print some variables
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "github event name: ${{ github.event_name }}"
          echo "github ref: ${{ github.ref }}"
          echo "github base ref: ${{ github.base_ref }}"
          echo "github head ref: ${{ github.head_ref }}"
          echo "github event path: ${{ github.event_path }}"
          echo "github event number: ${{ github.event.number }}"
          echo "github event pull request number: ${{ github.event.pull_request.number }}"
          echo "github event pull request head ref: ${{ github.event.pull_request.head.ref }}"
          echo "github event pull request base sha: ${{ github.event.pull_request.base.sha }}"

  linter-master:
    name: golangci-lint on master branch or on a tag
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          # We need to define the fetch-depth to 2 so that we can get new offenses since HEAD~1
          fetch-depth: 2
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          check-latest: true
      - name: Get golangci-lint configuration file
        run: wget --output-document=$(pwd)/.golangci.yml https://sc-devtools.s3.eu-west-1.amazonaws.com/golang-ci/golangci.yml
      - name: "Execute golangci-lint on the master branch"
        uses: golangci/golangci-lint-action@v4
        with:
          # The `only-new-issues` flag is not working (https://github.com/golangci/golangci-lint-action/issues/531).
          # We rather decided to use the suggestion from the FAQ (https://golangci-lint.run/usage/faq/#how-to-integrate-golangci-lint-into-large-project-with-thousands-of-issues) and use `--new-from-rev`
          # only-new-issues: false
          args: "--config=$(pwd)/.golangci.yml --new-from-rev=HEAD~1"

  releases:
    needs: [linter-master]
    name: GoReleaser Build on All OS but Windows
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # See: https://goreleaser.com/ci/actions/
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          check-latest: true
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CGO_ENABLED: 0

  releases-windows:
    needs: [linter-master]
    name: GoReleaser Build on Windows
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # See: https://goreleaser.com/ci/actions/
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          check-latest: true
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --config .goreleaser-windows.yaml --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
